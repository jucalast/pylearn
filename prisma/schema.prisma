// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  learningProfiles LearningProfile[]
  chatSessions     ChatSession[]
  codeSubmissions  CodeSubmission[]

  @@map("users")
}

model LearningProfile {
  id                String   @id @default(cuid())
  userId            String
  language          String   // Programming language
  knowledgeLevel    String   // beginner, intermediate, advanced
  studyPlan         Json     // JSON object with study plan structure
  currentProgress   Json     // JSON object tracking progress
  preferences       Json?    // Learning preferences
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("learning_profiles")
}

model ChatSession {
  id        String   @id @default(cuid())
  userId    String
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages ChatMessage[]

  @@map("chat_sessions")
}

model ChatMessage {
  id            String   @id @default(cuid())
  sessionId     String
  role          String   // user, assistant, system
  content       String
  metadata      Json?    // Additional metadata like code examples, exercises
  createdAt     DateTime @default(now())

  // Relationships
  session ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model Exercise {
  id          String   @id @default(cuid())
  language    String   // Programming language
  level       String   // beginner, intermediate, advanced
  title       String
  description String
  codeTemplate String?
  solution    String
  testCases   Json     // JSON array with test cases
  hints       Json?    // JSON array with hints
  metadata    Json?    // Additional metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  submissions CodeSubmission[]

  @@map("exercises")
}

model CodeSubmission {
  id          String   @id @default(cuid())
  userId      String
  exerciseId  String
  code        String
  isCorrect   Boolean
  feedback    String?
  score       Float?
  timeSpent   Int?     // Time spent in seconds
  attempts    Int      @default(1)
  createdAt   DateTime @default(now())

  // Relationships
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@map("code_submissions")
}

model LearningPath {
  id          String   @id @default(cuid())
  language    String   // Programming language
  level       String   // beginner, intermediate, advanced
  title       String
  description String
  modules     Json     // JSON array with learning modules
  estimatedHours Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("learning_paths")
}
